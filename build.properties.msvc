##############################################################################
### When checking the configuration of this file be sure to examine the output of
###  the "ant init.build" for help with build configuration problems.
###
### All users should be sure to check and configure things in the following
###  priority (list from: most likely to need changing, through most likely to be
###  auto-detected until least likely needs changing from the defaults we provide) :
###
###  generator.includepaths    (always needs uncommenting one line and fixing up)
###  qtjambi.config            (can usually be auto-detected)
###  qtjambi.qt.*              (5 properties in total, building for linux system wide)
###  qtjambi.phonon.*          (4 properties in total, some ditros when building for linux system wide)
###  qtjambi.debug-tools       (setup if you intend to run extended unit testing)
###  qtjambi.java.library.path (Linux and building to a system wide install path)
###  tools.qt.*                (when cross-compling, e.g. arm target on intel host)
###
### If you are building for Windows or MacOSX we recommend setup QTDIR envvar to
###  point to the loction of your Qt SDK it will get you most of the way there via
###  auto-detection.
###


###
# By default it will auto-detect the build mode to be using based on the Qt SDK
#  supplied to build against.  To allow this auto-detect to take place leave the
#  settings commented out.  "test" is releae mode with
#qtjambi.configuration = release
#qtjambi.configuration = debug
#qtjambi.configuration = debug_and_release
#qtjambi.configuration = test


###
# We have to add this here since different systems used different pathSeparators
#  due to drive letter syntax in windows etc.  We have to instruct generator of
#  the system locations for C/C++ include headers as generator acts like a
#  pre-processor.
# You must uncomment just one of these entires for your build target, ideally the
#  ones with maximal include paths, check the paths configured exist on your system
#  an fix them up to point to the correct places.
# Linux/MacOSX minimum
#generator.includepaths         = ${basedir}/generator/targets:${basedir}/src/cpp:${java.home.target}/include:${java.home.target}/include/${java.osarch.target}
# Windows minimum
#generator.includepaths         = ${basedir}/generator/targets;${basedir}/src/cpp;${java.home.target}/include;${java.home.target}/include/${java.osarch.target}
#
# Linux maximum, no missing header warnings (adjust to suit your GNUC version and location)
#generator.includepaths         = ${basedir}/generator/targets:${basedir}/src/cpp:${java.home.target}/include:${java.home.target}/include/${java.osarch.target}:/usr/include:/usr/include/c++/4.6.3:/usr/include/c++/4.6.3/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/4.6.3/include
# MacOSX maximum (OS 10.6.x, XCode 3.0 gcc 4.0.1, -arch i386 -mmacosx-version-min=10.4) JAVA_HOME=/Library/Java/Home -isysroot /Developer/SDKs/MacOSX10.4u.sdk
# Having to provide /Developer/SDKs/MacOSX10.4u.sdk/usr/X11R6/include for <GL/gl.h>
#generator.includepaths         = ${basedir}/generator/targets:${basedir}/src/cpp:${java.home.target}/include:/Developer/SDKs/MacOSX10.4u.sdk/usr/include:/Developer/SDKs/MacOSX10.4u.sdk/usr/include/c++/4.0.0:/Developer/SDKs/MacOSX10.4u.sdk/usr/include/c++/4.0.0/i686-apple-darwin9:/Developer/SDKs/MacOSX10.4u.sdk/usr/lib/gcc/i686-apple-darwin9/4.0.1/include:/Developer/SDKs/MacOSX10.4u.sdk/System/Library/Frameworks:/Developer/SDKs/MacOSX10.4u.sdk/usr/X11R6/include
# Windows maximum, no missing header warnings
generator.includepaths         = ${basedir}/generator/targets;${basedir}/src/cpp;${java.home.target}/include;${java.home.target}/include/${java.osarch.target};${env.INCLUDE}


### NOTE: the following 9 variables should be auto-detectable (expecially if QTDIR is set)
#
# name of qmake binary, found from qt.bindir (use "qmake.exe" on windows)
#qtjambi.qt.qmake                = qmake
#
# path to directory where qmake is
#qtjambi.qt.bindir               = /usr/bin
# path where Qt's libraries are
#qtjambi.qt.libdir               = /usr/lib/qt4
# path to Qt's include directory
#qtjambi.qt.includedir           = /usr/include/qt4
# path to directory where Qt's plugins directory is
#qtjambi.qt.pluginsdir           = /usr/lib/qt4/plugins
#
### NOTE: end of variables auto-detected if QTDIR is set


### these paths are same than above, but for phonon
### keep them commented out if your phonon is within Qt
#qtjambi.phonon.kdephonon        = true
#qtjambi.phonon.includedir       = /usr/include
#qtjambi.phonon.libdir           = /usr/lib
#qtjambi.phonon.pluginsdir       = /usr/lib/kde4/plugins


### If you are crosscompiling, following vars can be used to
### specify paths to native Qt version that will be used to compile
### native tools that are used to generate bindings
#tools.qt.bindir                 = /usr/bin
#tools.qt.libdir                 = /usr/lib
#tools.qt.qmake                  = qmake


### Required by some memory management related unit tests, to run properly.
###  It does not make any difference in building, but lowers the runtime performance.
###  You should leave it as false unless you want fully working unit tests.
### This automatically configures itself based on the ${qtjambi.configuration}
###  both "debug" and "test" will enable this by default with "release" it is
###  disabled or you can uncomment here to force the setting true or false.
#qtjambi.debug-tools = true

### This feature is now best handled by editing version.properties.template
### this allows it to be changed by editing a file in the JAR without rebuilding
### the entire QtJambi project.
# Do not set anything to this variable, unless you have machine which
# whines about empty java.library.path in some stage (Gentoo)
#qtjambi.java.library.path       = /usr/lib/gcc/i686-pc-linux-gnu/4.5.2


###
# For crosscompiling this can be used to set JDK of target machine. This
# is used to compile the bindings for that machine.
# Defaults to $JAVA_HOME. Alternatively, if $JAVA_HOME_TARGET is set,
# that variable is used if this one is not set.
#java.home.target               = /opt/jdk1.5.0_22

# If there is need to set (crosscompiling, for example), arch of target machine,
# this can be used to set it. By default this is detected automatically (host machine).
# This is label added to include path that is used
# to compile the native bindings: "$JAVA_HOME_TARGET/include/$JAVA_OSARCH_TARGET".
# You can also use environment variable $JAVA_OSARCH_TARGET.
#java.osarch.target             = win32
#java.osarch.target             = linux


###
# Logging
build.log.loglevel = verbose


###
# EXPERIMENTAL THINGS
#
# Use, or not, a native jump table. This is experimental, and is therefore
# disabled by default.
#
# If you want to enable it, uncomment both property settings.
#qtjambi.config.jumptable = jumptable
#qtjambi.generator.jumptable = --native-jump-table

#TODO: implement
qtjambi.generator = system-qt


###
### THE END
###
